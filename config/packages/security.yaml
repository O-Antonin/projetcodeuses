security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    
    # On déclare à Symfony que nous allons encoder un paramètre dans la classe/Entité Users (password)
    # On précise l'encodag de type (bcrypt)

    encoders:
        App\Entity\Users:
            algorithm: bcrypt
    
    



    providers:
        users_in_memory: { memory: null }

        in_database:
            entity:
                class: App\Entity\Users
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: lazy

            provider: in_database

            form_login:
                login_path: security_login
                check_path: security_login

            logout:
                path: security_logout
                target: blog

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER 

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/login, roles: ROLE_USER }
